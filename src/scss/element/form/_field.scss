/*
 * React Bucket Framwork
 *
 * Field @ _field.scss in 'Form'
 *
 * Defined at 2019-11-05
 * Copyright Marco Cavanna â€¢ 2019
 */


/******
    DEFAULT

    .field
    Is the main container for data,
    even if is a plain text field
    or a form input field
******/
.field {
  font-size: 1em;
  position: relative;
  font-weight: inherit;
  font-style: normal;
  margin-bottom: get-em-spacer(5);

  /* Compact Margin on boundary field */
  @include compact-margin;
}


/******
    LABEL

    Field Label style
    appending the * char to
    required field container
******/
.field {
  > label {
    display: block;
    font-weight: $semi-bold;
    font-size: .9em;
    opacity: .5;
    margin-bottom: get-em-spacer();
    padding-left: get-em-spacer();
  }

  &.is-required > label:after {
    content: ' *';
    color: $danger;
    font-weight: $semi-bold;
  }

  &.has-text-center,
  &.has-text-right {
    > label {
      padding-left: 0;
    }
  }

  &.has-text-right > label {
    padding-right: get-em-spacer();
  }
}


/******
    CONTENT

    Field content has
    some property to help
    styling child
******/
.field > .content {
  position: relative;
}


/******
    ADDONS

    Field may have hint or messages
    Hint is a special bordered hint
    with text inside.
    Message are plain text only
******/
.field {

  > .addon {
    display: block;
    opacity: .85;
    font-size: .85em;
    margin-top: get-em-spacer();

    &.field-hint {
      padding: get-em-spacer();
      margin: get-em-spacer() 0 0;
      border-radius: $border-radius-small;
      background-color: $white-shade;
      color: $text-light;
      font-weight: $semi-bold;
      will-change: background-color, color;
      transition:
        background-color $transition-ease $transition-duration,
        color $transition-ease $transition-duration;

      @include background-variation($brand: true, $ui: true, $social: true);
    }
  }

}


/******
    SIZE AND COLORS

    Field appearance can change
    size or color can be variables
******/
.field {

  /*---
    Size Variation, using default mixin
  ---*/
  @include size-variation();

  /*---
    Field color change, using a dedicated mixin
  ---*/
  @each $label, $color in $react-bucket-brand-colors-map {
    &.is-transparent > .content > input,
    &.is-transparent > .content > textarea {
      background-color: transparent;
    }

    &.is-#{$label} {
      @include __field-color-change($color);
    }
  }

}


/******
    DISABLED

    Disabled Field must set lower opacity
    and disable all user pointer events
******/
.field {
  &.is-inline {
    display: inline-block;
    margin: 0;
  }

  /* Style for entire disable field */
  &.is-disabled {
    opacity: $disabled-opacity !important;

    > .content {
      > input,
      > textarea,
      > .label,
      > .button:disabled,
      > .icon {
        pointer-events: none;
      }
    }
  }

  /* Style for disabled input only */
  &:not(.is-disabled) {
    >.content > input[disabled]
    >.content > textarea[disabled] {
      opacity: $disabled-opacity !important;
      pointer-events: none;
    }
  }
}


/******
    FOCUSED

    A focused field will change
    the child input or element
    setting special color on box shadow
******/
.field {
  &.is-focused > .content:not(.is-bordered) > input:not(:read-only),
  > .content:not(.is-bordered) > input:focus:not(:read-only),
  &.is-focused > .content:not(.is-bordered) > textarea:not(:read-only),
  > .content:not(.is-bordered) > textarea:focus:not(:read-only) {
    box-shadow: inset 0px -5px 0px -3px $primary;
  }

  &.is-focused > .content.is-bordered > input:not(:read-only),
  > .content.is-bordered > input:focus:not(:read-only),
  &.is-focused > .content.is-bordered > textarea:not(:read-only),
  > .content.is-bordered > textarea:focus:not(:read-only) {
    box-shadow: inset 0px 0px 0px 1px $primary;
  }
}
