/*
 * React Bucket Framwork
 *
 * Input @ _input.scss in 'Form'
 *
 * Defined at 2019-11-05
 * Copyright Marco Cavanna â€¢ 2019
 */


 /******
     Remove Input Appearance
     to style each part of the component
 ******/
 input[type=email],
 input[type=password],
 input[type=search],
 input[type=text],
 textarea {
   appearance: none;
 }


/******
    A Field containing an input
    must define the input style
******/
.field > .input {

  /*---
    BASE

    An input container must
    be in flex mode, to let
    add content before and after
    the `flex` will be applied on
    on .is-full class
  ---*/
  & {
    display: inline-flex;
    position: relative;
  }

  /*---
    INPUT

    Style the Input Field
  ---*/
  > input,
  > textarea {
    font-family: inherit;
    color: inherit;
    text-align: left;
    outline: 0;

    flex: 1 1 auto;
    max-width: 100%;
    min-width: 0px;

    margin: 0;
    padding: pixel-to-em($input-vertical-padding + 1) $input-horizontal-padding;
    line-height: $input-line-height;

    background-color: $white;
    border: none;
    border-radius: 0;
    box-shadow: inset 0px -4px 0px -3px $border-color;
    will-change: transition, box-shadow;
    transition: border .1s ease, box-shadow .1s ease;
  }

  /*---
    FULL WIDTH

    Full width field input must enlarge
  ---*/
  &.is-full {
    display: flex;
    width: 100%;
  }

  /*---
    BORDERED

    Apply border to input element
  ---*/
  &.is-bordered > input,
  &.is-bordered > textarea {
    box-shadow: inset 0px 0px 0px 1px $border-color;
    border-radius: pixel-to-em($border-radius);
  }

  /*---
    ADDON

    Input addone are style to live
    all together
  ---*/
  > .label-wrapper > .label,
  > .button {
    margin: 0;
    line-height: $input-height;
    padding-top: 0;
    padding-bottom: 0;
    font-size: 1em;
  }

  > .label-wrapper > .label {
    flex: 0 0 $input-height;
    text-align: center;
    color: $grey;
    margin: 0;
    line-height: $input-height;
    height: 100%;
    box-shadow: none;
    background-color: $border-color;
    min-width: 38px;
  }

  &.with-action.action-on-right,
  &.with-label.label-on-right,
  &.with-icon.icon-on-right {
    > input,
    > textarea,
    > .select > .bucket__control {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }
  }

  &.with-action.action-on-left,
  &.with-label.label-on-left,
  &.with-icon.icon-on-left {
    > input,
    > textarea,
    > .select > .bucket__control {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }
  }

  /* Input Action */
  &.with-action {
    > .as-icon {
      font-size: 1.25em;
      padding-left: pixel-to-em(6px);
      padding-right: pixel-to-em(6px);
    }

    &.action-on-left {
      > .button {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;

        + .label-wrapper .label,
        + .icon {
          border-top-left-radius: 0 !important;
          border-bottom-left-radius: 0 !important;
        }
      }
    }

    &.action-on-right {
      > .button {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
      }
    }
  }

  /* Input Label */
  &.with-label {

    .label {
      white-space: nowrap;
    }

    &.label-on-left {
      > .label-wrapper > .label {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;

        + .icon {
          border-top-left-radius: 0 !important;
          border-bottom-left-radius: 0 !important;
        }
      }

      &.with-action.action-on-left {
        > .label-wrapper > .label {
          border-top-left-radius: 0;
          border-bottom-left-radius: 0;
        }
      }
    }

    &.label-on-right {
      > .label-wrapper > .label {
        border-bottom-left-radius: 0;
        border-top-left-radius: 0;
      }

      &.with-action.action-on-right {
        > .label-wrapper > .label {
          border-top-right-radius: 0;
          border-bottom-right-radius: 0;
        }
      }
    }
  }

  /* Input Icon */
  &.with-icon {
    > .icon {
      flex: 0 0 $input-height;
      text-align: center;
      color: $grey;
      margin: 0;
      line-height: $input-height;
    }

    &.is-bordered {
      > .icon {
        background-color: $border-color;
      }

      &.icon-on-left {
        > .icon {
          border-top-left-radius: pixel-to-em($border-radius);
          border-bottom-left-radius: pixel-to-em($border-radius);
        }
      }
    }

    &:not(.is-bordered) > .icon {
      box-shadow: inset 0px -4px 0px -3px $border-color;
    }
  }

}
