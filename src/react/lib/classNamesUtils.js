import { isObject } from '@appbuckets/rabbit';

import _ from 'lodash';

/**
 * ReactBucket UI will use some of key property
 * to retreive class names.
 * Use one of this utility in combination
 * with classnames module
 */

/**
 * Use the Props has a boolean value to
 * appen the right class. If value
 * fallback to true, className will be appended
 * @param {*} value The Props Value
 * @param {String} className The Classname to return
 * @param {String} elseClassName Classname to use if value is falsy
 *
 * @example
 * <Button primary />
 * <button class="is-primary"></button>
 */
export const classByKey = (value, className, elseClassName) => (value ? className : elseClassName);

/**
 * Classname that will append 'is-' keyword
 * to property
 * @param {*} value The Props Value
 * @param {String} className The Classname to use
 *
 * @example
 * <Column is={8} />
 * <div class="column is-8"></div>
 */
export const isValue = value => (value && value !== true ? `is-${value.toString()}` : false);

/**
 * Classname that will replace a pattern
 * @param {String} value The Props Value
 * @param {String} classNamePattern The Classname pattern to use
 *
 * @example
 * classByPattern(width, 'is-%value%-width');
 *
 * <Layout width='phone' />
 * <div class="container is-phone-width"></div>
 */
export const classByPattern = (value, classNamePattern) => (typeof value === 'string' || typeof value === 'number') && classNamePattern.replace('%value%', value.toString().replace(/\s/g, '-'));

/**
 * Classname that will be generated by value
 * @param {String} value The Props Value
 *
 * @example
 * classByValue(verticalAlign)
 *
 * <Layout.Row verticalAlign='on top' />
 * <div class="with-columns on-top"></div>
 */
export const classByValue = value => typeof value === 'string' && value.toLowerCase().replace(/\s/g, '-');

/**
 * Classname generated using responsive property
 * @param {Boolean|String} value The Props Value
 * @param {String} baseClass The base classname to use
 *
 * @example
 * responsiveClass(withoutGap, 'without-gap')
 *
 * <Layout.Row withoutGap />
 * <div class="with-columns without-gap" />
 *
 * @example
 * <Layout.Row withoutGap='on tablet' />
 * <div class="with-columns on-tablet-without-gap" />
 */
export const responsiveClass = (value, baseClass) => (
  value === true
    ? baseClass
    : typeof value === 'string'
      ? `${value.toLowerCase().replace(/\s/g, '-')}-${baseClass}`
      : false
);


/**
 * Generate responsive classname using an object and a compute function
 * @param {String|Object} value Prop Value
 * @param {*} baseClass The base classname to use
 * @param {*} computeFn The compute function to generate class
 *
 * @example
 * multiResponsiveKey(textAlign, 'has-text-%value%', classByPatter)
 *
 * <Panel.Section textAlign='center' />
 * <div class="panel-section has-text-center"></div>
 *
 * <Panel.Section textAlign={{ phone: 'right', tabletUp: 'left', largeDesktop: 'center' }} />
 * <div class="panel-section on-phone-has-text-right on-tablet-up-has-text-left on-large-desktop-has-text-center"></div>
 */
export const multiResponsiveKey = (value, baseClass, computeFn = classByKey) => {

  /** If value is not an object, use the Compute FN to generate class */
  if (!isObject(value)) {
    return computeFn(value, baseClass);
  }

  /** Else if Value is an Object, compute each different key */
  const classes = [];

  Object.getOwnPropertyNames(value).forEach((breakpoint) => {
    classes.push(`on-${_.kebabCase(breakpoint)}-${computeFn(value[breakpoint], baseClass)}`);
  });

  return classes.join(' ');
};
