import * as React from 'react';
import clsx from 'clsx';

import RcTable from 'rc-table';
import { ColumnsType as RcColumnsType } from 'rc-table/lib/interface';

import { Loader } from '../../elements/Loader';

import { RxTableProps, GetRowKey, RxTableColumnTitleProps, RxTableColumns } from './RxTable.types';

import Table from '../Table/Table';

// import useLazyKVMap from './hooks/useLazyKVMap';
import { useTitleColumns } from './hooks/useTitleColumns';


interface RxTableDataState<Data> {
  data: Data[];

  error: any;

  loading: boolean;
}

interface CellRenderProps {
  children: React.ReactChildren;

  [key: string]: any;
}


const customCellRender = (Element: React.ElementType) => (props: CellRenderProps) => {
  const {
    children: rawChildren,
    ...rest
  } = props;

  /** AutoGenerated Cells can have string | number as primary content, transform them into title */
  // @ts-ignore
  if (typeof rawChildren[1] === 'string' || typeof rawChildren[1] === 'number') {
    return (
      <Element {...rest} header={rawChildren} />
    );
  }

  /** Removed Undefined Children */
  const newProps = {
    ...rest,
    children: (rawChildren as unknown as any[]).filter(child => child !== undefined)
  };

  /** Return Element Shorthand Factory */
  return (Element as any).create(newProps, { autoGenerateKey: false });
};


export default function RxTable<Data = any>(props: RxTableProps<Data>): React.ReactElement<RxTableProps<Data>> {

  const {
    className,
    childrenColumnName,
    columns,
    data,
    forceDataReload,
    initiallyLoading,
    rowKey,
    tableProps,
    ...rest
  } = props;


  // ----
  // Compute Rendering and Classes
  // ----
  const classes = clsx(
    'rx-table',
    className
  );


  // ----
  // Data Loading Hook
  // ----
  const [ dataState, setDataState ] = React.useState<RxTableDataState<Data>>({
    data   : Array.isArray(data) ? data : [],
    loading: !!initiallyLoading,
    error  : null
  });

  React.useEffect(
    () => {
      (async () => {
        /** If Data is a Plain Array, set state */
        if (Array.isArray(data) || data == null) {
          setDataState({
            data   : data ?? [],
            loading: false,
            error  : null
          });
          return;
        }
        /** Else, invoke the Function */
        try {
          const result = await data(Date.now(), props);
          setDataState({
            data   : result,
            loading: false,
            error  : null
          });
        }
        catch (e) {
          setDataState({
            data   : [],
            loading: false,
            error  : e
          });
        }
      })();
    },
    [ forceDataReload ]
  );

  const getRowKey = React.useMemo<GetRowKey<Data>>(
    () => {
      if (typeof rowKey === 'function') {
        return rowKey;
      }

      return ((item: Data) => (item)[rowKey as keyof Data]) as unknown as GetRowKey<Data>;
    },
    [ rowKey ]
  );

  // const [ getRecordByKey ] = useLazyKVMap(dataState.data, childrenColumnName as keyof Data, getRowKey);


  // ----
  // Column Computing
  // ----
  const [ transformColumnTitle ] = useTitleColumns<Data>(
    columns.map(() => ({})) as RxTableColumnTitleProps<Data>
  );

  const transformColumns = React.useCallback(
    (innerColumns: RxTableColumns<Data>): RxTableColumns<Data> => {
      return transformColumnTitle(innerColumns);
    },
    [ transformColumnTitle ]
  ) as (innerColumns: RcColumnsType<Data>) => RcColumnsType<Data>;


  // ----
  // Component Renders
  // ----
  if (dataState.loading) {
    return (
      <Loader
        active
        centered
        appearance={'primary'}
        type={'indeterminate bar'}
        size={'large'}
      />
    );
  }


  return (
    <RcTable<Data>
      {...rest}
      columns={columns as RcColumnsType<Data>}
      data={dataState.data}
      className={classes}
      rowKey={getRowKey}
      // Internal
      transformColumns={transformColumns}
      components={{
        table : (componentProps: any) => (<Table {...tableProps} {...componentProps} />),
        header: {
          wrapper: Table.Header,
          row    : Table.Row,
          cell   : customCellRender(Table.HeaderCell)
        },
        body  : {
          wrapper: Table.Body,
          row    : Table.Row,
          cell   : customCellRender(Table.Cell)
        }
      }}
    />
  );

}

RxTable.displayName = 'RxTable';

RxTable.defaultProps = {
  initiallyLoading: true,
  rowKey          : 'id',
  tableLayout     : 'fixed'
} as Partial<RxTableProps<any>>;
