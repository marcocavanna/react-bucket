import * as React from 'react';
import { FieldMetaProps, FieldValidator, FormikContextType } from 'formik';
import { AnyObject, SharedComponentStateProps } from '../../../generic';
export interface WithFormikFieldConfiguration<
  P extends WrappedComponentInnerProps,
  ValueType,
  DisplayedValue = ValueType
> {
  /** The Component to Render */
  Component: React.ComponentType<
    FormikFieldComponentRenderProps<P, ValueType, DisplayedValue>
  >;
  /** Manual Override the displayed value */
  computeValue?: FormikFieldValueComputing<P, ValueType, DisplayedValue>;
  /** Set component default props */
  defaultProps?: Partial<P>;
  /** Set the field display name */
  displayName?: string;
  /** Override default onChange field handler */
  onChange?: FormikFieldChangeHandler<P, ValueType>;
  /** Override component props */
  overrideProps?: Partial<P>;
  /** Choose if meta touched props must be set to true on change, default `true` */
  setTouchedOnChange?: boolean;
}
export declare type FormikFieldComponent<P> = React.FunctionComponent<
  FormikFieldComponentProps<P>
>;
export declare type FormikFieldComponentProps<P> = P & {
  /** The field name is required to let formik work */
  name: string;
  /** Get the error message only once form has been submitted at least once, default to `true` */
  getErrorOnSubmitted?: boolean;
  /** Get the error message once field has been touched, default to `false` */
  getErrorOnTouched?: boolean;
  /** Override the default setTouchedOnChange behaviour */
  setTouchedOnChange?: boolean;
  /** Field Validator Function */
  validate?: FieldValidator;
};
export declare type FormikFieldValueComputing<
  P,
  ReceivedValue,
  ReturnedValue
> = (
  /** Current Form Value */
  value: ReceivedValue,
  /** Component Props */
  props: {
    /** Field Name */
    name: string;
  } & P
) => ReturnedValue;
export declare type FormikFieldChangeHandler<P, ValueType> = (
  /** The formik bag */
  formik: FormikContextType<any>,
  /** The original FormEvent generated */
  event: React.FormEvent<HTMLElement>,
  /** Component Props */
  props: {
    /** Field name */
    name: string;
  } & P,
  /** Field Meta Props */
  meta: FieldMetaProps<ValueType>
) => void;
export declare type WrappedComponentInnerProps = AnyObject & {
  /** Local onBlur event handler */
  onBlur?: (...args: any[]) => void;
  /** Local onChange event handler */
  onChange?: (...args: any[]) => void;
  /** The field name */
  name?: string;
  /** The field validator function */
  validator?: FieldValidator;
};
export declare type FormikFieldComponentRenderProps<
  P,
  ValueType,
  DisplayedValue = ValueType
> = {
  /** Meta props generated by Formik context */
  meta: FieldMetaProps<ValueType>;
  /** All default component props passed while rendering */
  rest: {
    /** On Blur Handler */
    onBlur: (...args: any[]) => void;
    /** On Change Handler */
    onChange: (...args: any[]) => void;
    /** The field name */
    name: string;
    /** The field value */
    value: DisplayedValue;
  } & P;
  /** The field state at render time */
  state: FieldState;
};
declare type FieldState = SharedComponentStateProps & {
  /** Get if form is currently submitting */
  isSubmitting: boolean;
  /** Validation Message */
  message: string | undefined;
};
export {};
