{"version":3,"file":"Weather.js","sources":["../../../../src/react/widget/Weather/Weather.tsx"],"sourcesContent":["import * as React from 'react';\nimport clsx from 'clsx';\n\nimport {\n  simpleFetch,\n  useElementType,\n  useSharedClassName\n} from '../../lib';\n\nimport { WeatherProps } from './Weather.types';\n\nimport * as Icons from './icons';\nimport { Loader } from '../../elements/Loader';\nimport { Header } from '../../elements/Header';\nimport { Icon } from '../../elements/Icon';\n\n\n/* --------\n * Declare Internal Using Interfaces\n * -------- */\ninterface WeatherResponse {\n  /** Temps and Humidity */\n  main: { temp: number, humidity: number };\n\n  /** System Information */\n  sys: { sunrise: number, sunset: number };\n\n  /** Current Eligible Weather */\n  weather: { id: number, main: string, description: string }[];\n}\n\ninterface IPAPIResponse {\n  city: string;\n\n  countryCode: string;\n}\n\ninterface WeatherState {\n  /** Current User City */\n  city: string | null;\n\n  /** Current User Country */\n  countryCode: string | null;\n\n  /** Request Error */\n  error: boolean;\n\n  /** Check if current time is night or day */\n  isNight: boolean;\n\n  /** Current Humidity */\n  humidity: number | null;\n\n  /** Request State */\n  loading: boolean;\n\n  /** Current Temperature */\n  temperature: number | null;\n\n  /** Current Weather Condition */\n  weather: { id: number, main: string, description: string } | null;\n}\n\n\n/* --------\n * Component Declaration\n * -------- */\ntype WeatherComponent = React.FunctionComponent<WeatherProps>;\n\n/* --------\n * Component Render\n * -------- */\nconst Weather: WeatherComponent = (props) => {\n\n  const {\n    className,\n    rest: {\n      language,\n      openWeatherMapAPI,\n      showHumidity,\n      showTemperature,\n      updateInterval,\n      units,\n      ...rest\n    }\n  } = useSharedClassName(props);\n\n  /** Get render element type */\n  const ElementType = useElementType(Weather, props);\n\n  /** Build a State Container for fetch request */\n  const [ state, setState ] = React.useState<WeatherState>({\n    city       : null,\n    countryCode: null,\n    error      : false,\n    humidity   : null,\n    isNight    : true,\n    loading    : true,\n    temperature: null,\n    weather    : null\n  });\n\n  /** Build a Reload Time State to refresh weather */\n  const [ reloadTime, setReloadTime ] = React.useState<number>(Date.now());\n\n  /** Set the Interval to reload Weather condition */\n  React.useEffect(\n    () => {\n      /** If updated interval is 0, return */\n      if (updateInterval === 0 || typeof updateInterval !== 'number') {\n        return () => null;\n      }\n\n      /** Create a new Interval */\n      const reloadInterval = setTimeout(() => {\n        setReloadTime(Date.now());\n      }, updateInterval);\n\n      /** Delete the timer on unmount */\n      return () => {\n        clearTimeout(reloadInterval);\n      };\n    },\n    [ reloadTime, updateInterval ]\n  );\n\n  /** Fetch Weather Condition each time reloadTime change */\n  React.useEffect(\n    () => {\n      (async () => {\n        try {\n          /** Get User Location */\n          const location = await simpleFetch<IPAPIResponse>('http://ip-api.com/json?fields=countryCode,city');\n\n          /** Get Current Weather */\n          const weather = await simpleFetch<WeatherResponse>(\n            `https://api.openweathermap.org/data/2.5/weather?q=${location.city},${location.countryCode}&appid=${openWeatherMapAPI}&lang=${language}&units=${units}`\n          );\n\n          const now = Date.now();\n\n          setState({\n            city       : location.city,\n            countryCode: location.countryCode,\n            error      : false,\n            humidity   : weather.main.humidity,\n            isNight    : now < weather.sys.sunrise * 1000 || now > weather.sys.sunset * 1000,\n            loading    : false,\n            temperature: weather.main.temp,\n            weather    : weather.weather[0]\n          });\n        }\n        catch (e) {\n          setState((currState) => ({\n            ...currState,\n            loading: false,\n            error  : true\n          }));\n        }\n      })();\n    },\n    [ language, openWeatherMapAPI, reloadTime, units ]\n  );\n\n  /** Build Component Classes */\n  const classes = clsx(\n    { loading: state.loading },\n    'weather',\n    'widget',\n    className\n  );\n\n  /** If Component is currently Loading show loaders */\n  if (state.loading) {\n    return (\n      <ElementType {...rest} className={classes}>\n        <Loader primary type={'indeterminate bar'} />\n      </ElementType>\n    );\n  }\n\n  /** If an Error occurred, show it */\n  if (state.error || !state.weather) {\n    return (\n      <ElementType {...rest} className={classes}>\n        <Icon name={'times circle'} danger size={'big'} iconStyle={'regular'} />\n      </ElementType>\n    );\n  }\n\n  /** Build Weather Icon */\n  let iconElement: React.ReactElement | null = null;\n  const { id } = state.weather;\n\n  if (id >= 200 && id <= 232) {\n    iconElement = <Icons.Thunderstorm />;\n  }\n  else if ((id >= 300 && id <= 501) || id === 520) {\n    iconElement = <Icons.LightRain />;\n  }\n  else if (id === 502 || id === 503 || id === 504 || id === 521) {\n    iconElement = <Icons.HeavyRain />;\n  }\n  else if (id === 511) {\n    iconElement = <Icons.Hail />;\n  }\n  else if (id >= 600 && id <= 613) {\n    iconElement = <Icons.Snow />;\n  }\n  else if (id >= 615 && id <= 622) {\n    iconElement = <Icons.Snow />;\n  }\n  else if (id >= 700 && id <= 771) {\n    iconElement = <Icons.Fog />;\n  }\n  else if (id === 781) {\n    iconElement = <Icons.Tornado />;\n  }\n  else if (id === 800) {\n    iconElement = state.isNight ? <Icons.ClearNight /> : <Icons.ClearDay />;\n  }\n  else if (id === 801 || id === 802) {\n    iconElement = state.isNight ? <Icons.LightCloudyNight /> : <Icons.LightCloudyDay />;\n  }\n  else if (id === 803) {\n    iconElement = state.isNight ? <Icons.CloudyNight /> : <Icons.CloudyDay />;\n  }\n  else if (id === 804) {\n    iconElement = <Icons.HeavyCloud />;\n  }\n\n  /** Return the Component */\n  return (\n    <ElementType {...rest} className={classes}>\n      <Header\n        content={(\n          <div className={'widget-content'}>\n            {iconElement && (\n              <div className={'addon weather'} title={state.weather.description}>\n                {iconElement}\n              </div>\n            )}\n            {showTemperature && state.temperature != null && (\n              <div className={'addon temperature'}>\n                <div className={'data'}>\n                  {state.temperature.toFixed()}Â°\n                </div>\n                <Icons.Temperature />\n              </div>\n            )}\n            {showHumidity && state.humidity != null && (\n              <div className={'addon humidity'}>\n                <div className={'data'}>\n                  {state.humidity.toFixed()}\n                </div>\n                <Icons.Humidity />\n              </div>\n            )}\n          </div>\n        )}\n        subheader={state.city}\n      />\n    </ElementType>\n  );\n\n};\n\n\n/** Properly Set Display Name */\nWeather.displayName = 'WeatherWidget';\n\n/** Set default props */\nWeather.defaultProps = {\n  language      : 'en',\n  updateInterval: 600000,\n  units         : 'metric'\n};\n\nexport default Weather;\n"],"names":["useSharedClassName","useElementType","React.useState","React.useEffect","clsx","React.createElement","Icons.Thunderstorm","Icons.LightRain","Icons.HeavyRain","Icons.Hail","Icons.Snow","Icons.Fog","Icons.Tornado","Icons.ClearNight","Icons.ClearDay","Icons.LightCloudyNight","Icons.LightCloudyDay","Icons.CloudyNight","Icons.CloudyDay","Icons.HeavyCloud","Icons.Temperature","Icons.Humidity"],"mappings":"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"}