{"version":3,"file":"VirtualizedTableBody.js","sources":["../../../../src/react/modules/VirtualizedTable/VirtualizedTableBody.tsx"],"sourcesContent":["import * as React from 'react';\nimport clsx from 'clsx';\n\nimport {\n  VariableSizeList,\n  ListChildComponentProps,\n  areEqual\n} from 'react-window';\n\nimport { RxTableBodyCell } from '../../collections/RxTable/RxTableBody';\n\nimport { useVirtualizedTable } from './VirtualizedTable.context';\nimport { PickedVariableSizeList } from './VirtualizedTable.types';\n\n\n/* --------\n * Useful internal types\n * -------- */\ntype VirtualizedElementProps = {\n  children: React.ReactNode;\n  className: string;\n  onScroll: (...args: any[]) => void;\n  style: React.CSSProperties;\n};\n\n\n/* --------\n * Render each row\n * -------- */\nconst VirtualizedTableRow: React.FunctionComponent<ListChildComponentProps> = (\n  props\n) => {\n\n  const {\n    index,\n    style\n  } = props;\n\n  const {\n    columns,\n    Components,\n    tableData,\n    getRowHeight,\n    isRowClickEnabled,\n    handleRowClick: superHandleRowClick\n  } = useVirtualizedTable();\n\n  /** Get Row Data */\n  const row = tableData[index];\n\n  /** Get the Current row Size */\n  const rowHeight = getRowHeight(index);\n\n  /** Build row classes */\n  const classes = clsx(\n    'virtualized row',\n    {\n      last     : index === tableData.length - 1,\n      first    : index === 0,\n      clickable: isRowClickEnabled\n    }\n  );\n\n\n  /* --------\n   * Handlers\n   * -------- */\n  const handleRowClick = React.useCallback(\n    () => {\n      superHandleRowClick(index);\n    },\n    [ superHandleRowClick, index ]\n  );\n\n\n  /* --------\n   * Return the Component\n   * -------- */\n  return (\n    <Components.BodyRow\n      className={classes}\n      columns={columns}\n      index={index}\n      onClick={isRowClickEnabled ? handleRowClick : undefined}\n      style={{ ...style, height: rowHeight }}\n      row={row}\n    >\n      {columns.map((column) => (\n        <RxTableBodyCell\n          className={'virtualized cell'}\n          key={column.key}\n          Component={Components.BodyCell}\n          column={column}\n          tableData={tableData}\n          index={index}\n          row={row}\n        />\n      ))}\n    </Components.BodyRow>\n  );\n};\n\nconst MemoizedVirtualizedTableRow = React.memo(VirtualizedTableRow, areEqual);\n\n\n/* --------\n * The inner element that will wrap\n * each virtualized row\n * It is the full height scrolling element\n * -------- */\nconst VirtualizedBody: React.FunctionComponent<VirtualizedElementProps> = (props) => {\n\n  const {\n    children,\n    className,\n    ...rest\n  } = props;\n\n  const {\n    Components\n  } = useVirtualizedTable();\n\n  const classes = clsx(\n    'virtualized body',\n    className\n  );\n\n  return (\n    <Components.Body className={classes} {...rest}>\n      {children}\n    </Components.Body>\n  );\n};\n\n\n/* --------\n * Outer Element\n * It will render the outer wrapper div\n * of the Virtualized Table\n * It is the fixed height/width element\n * -------- */\nconst VirtualizedBodyWrapper = React.forwardRef<any, VirtualizedElementProps>(\n  (props, ref) => {\n    const {\n      children,\n      className,\n      ...rest\n    } = props;\n\n    const {\n      Components\n    } = useVirtualizedTable();\n\n    const classes = clsx(\n      'virtualized table',\n      className\n    );\n\n    return (\n      <Components.BodyWrapper ref={ref} className={classes} {...rest}>\n        {children}\n      </Components.BodyWrapper>\n    );\n  }\n);\n\n\n/* --------\n * Component Definition\n * -------- */\ninterface VirtualizedTableBodyProps extends PickedVariableSizeList {\n  estimatedItemSize?: number;\n}\n\nconst VirtualizedTableBody: React.FunctionComponent<VirtualizedTableBodyProps> = (\n  props\n) => {\n\n  const {\n    columns,\n    Components,\n    effectiveWidth,\n    error,\n    getRowHeight,\n    height,\n    filters,\n    isLoading,\n    tableData\n  } = useVirtualizedTable();\n\n  const {\n    direction,\n    estimatedItemSize,\n    itemKey,\n    overscanCount,\n    onItemsRendered,\n    onScroll,\n    useIsScrolling\n  } = props;\n\n  /** Show the Loader while requesting data */\n  if (isLoading) {\n    return (\n      <Components.BodyWrapper>\n        <Components.Body>\n          <Components.LoaderRow className={'loading-row'}>\n            <Components.LoaderCell colSpan={columns.length} className={'loading-cell'}>\n              <Components.Loader />\n            </Components.LoaderCell>\n          </Components.LoaderRow>\n        </Components.Body>\n      </Components.BodyWrapper>\n    );\n  }\n\n  /** If an error occurred, show dedicated component */\n  if (error) {\n    return (\n      <Components.BodyWrapper>\n        <Components.Body>\n          <Components.ErrorRow className={'error-row'}>\n            <Components.ErrorCell colSpan={columns.length} className={'error-cell'}>\n              <Components.Error error={error} />\n            </Components.ErrorCell>\n          </Components.ErrorRow>\n        </Components.Body>\n      </Components.BodyWrapper>\n    );\n  }\n\n  /** Render no Content */\n  if (!tableData.length) {\n    return (\n      <Components.BodyWrapper>\n        <Components.Body>\n          <Components.NoContentRow className={'no-content-row'}>\n            <Components.NoContentCell colSpan={columns.length} className={'no-content-cell'}>\n              <Components.NoContent filters={filters} />\n            </Components.NoContentCell>\n          </Components.NoContentRow>\n        </Components.Body>\n      </Components.BodyWrapper>\n    );\n  }\n\n  return (\n    <VariableSizeList\n      direction={direction}\n      itemKey={itemKey}\n      overscanCount={overscanCount}\n      onItemsRendered={onItemsRendered}\n      onScroll={onScroll}\n      useIsScrolling={useIsScrolling}\n      width={effectiveWidth}\n      height={height}\n      itemSize={getRowHeight}\n      estimatedItemSize={estimatedItemSize}\n      itemCount={tableData.length}\n      innerElementType={VirtualizedBody}\n      outerElementType={VirtualizedBodyWrapper}\n    >\n      {MemoizedVirtualizedTableRow}\n    </VariableSizeList>\n  );\n};\n\nVirtualizedTableBody.displayName = 'VirtualizedTableBody';\n\nexport { VirtualizedTableBody };\n"],"names":["useVirtualizedTable","clsx","React.useCallback","React.createElement","RxTableBodyCell","React.memo","areEqual","React.forwardRef","VariableSizeList"],"mappings":"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"}