{"version":3,"file":"readFile.js","sources":["../../../../../src/react/modules/Dropzone/lib/readFile.ts"],"sourcesContent":["import { DropzoneFile } from '../Dropzone.types';\nimport mimeTypeToIcon from './mimeTypeToIcon';\n\n\nexport default function readFile(file: File): Promise<DropzoneFile> {\n  return new Promise<DropzoneFile>((resolve) => {\n    /** Create the base Dropzone File */\n    const dropzoneFile: DropzoneFile = {\n      blob        : file,\n      height      : 0,\n      icon        : mimeTypeToIcon(file.type),\n      id          : (Date.now() + (Math.random() * 1000)).toString(36),\n      isImage     : /^image\\//.test(file.type),\n      name        : file.name,\n      originalName: file.name,\n      preview     : null,\n      readError   : false,\n      size        : file.size,\n      state       : {\n        error      : false,\n        isUploading: false,\n        success    : false\n      },\n      type        : file.type,\n      width       : 0\n    };\n\n    /** If file is not an image, return */\n    if (!dropzoneFile.isImage) {\n      return resolve(dropzoneFile);\n    }\n\n    /** Else, read the image */\n    const reader = new FileReader();\n\n    /** Init an handler to abort the reader */\n    const handleAbortRead = () => {\n      dropzoneFile.readError = true;\n      return resolve(dropzoneFile);\n    };\n\n    /** Attach events to file reader */\n    reader.onabort = handleAbortRead;\n    reader.onerror = handleAbortRead;\n\n    reader.onload = (event) => {\n      /** Set the preview */\n      dropzoneFile.preview = event.target?.result?.toString() ?? null;\n\n      /** Read the image to get its dimension */\n      if (event.target && typeof event.target.result === 'string') {\n        const image = new Image();\n        image.src = event.target.result;\n\n        image.onload = () => {\n          dropzoneFile.height = image.height;\n          dropzoneFile.width = image.width;\n          return resolve(dropzoneFile);\n        };\n      }\n      else {\n        return resolve(dropzoneFile);\n      }\n    };\n\n    /** Read the file */\n    reader.readAsDataURL(file);\n  });\n}\n"],"names":[],"mappings":";;;;SAIwB,QAAQ,CAAC,IAAU;IACzC,OAAO,IAAI,OAAO,CAAe,UAAC,OAAO;;QAEvC,IAAM,YAAY,GAAiB;YACjC,IAAI,EAAU,IAAI;YAClB,MAAM,EAAQ,CAAC;YACf,IAAI,EAAU,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;YACvC,EAAE,EAAY,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,QAAQ,CAAC,EAAE,CAAC;YAChE,OAAO,EAAO,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;YACxC,IAAI,EAAU,IAAI,CAAC,IAAI;YACvB,YAAY,EAAE,IAAI,CAAC,IAAI;YACvB,OAAO,EAAO,IAAI;YAClB,SAAS,EAAK,KAAK;YACnB,IAAI,EAAU,IAAI,CAAC,IAAI;YACvB,KAAK,EAAS;gBACZ,KAAK,EAAQ,KAAK;gBAClB,WAAW,EAAE,KAAK;gBAClB,OAAO,EAAM,KAAK;aACnB;YACD,IAAI,EAAU,IAAI,CAAC,IAAI;YACvB,KAAK,EAAS,CAAC;SAChB,CAAC;;QAGF,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;YACzB,OAAO,OAAO,CAAC,YAAY,CAAC,CAAC;SAC9B;;QAGD,IAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;;QAGhC,IAAM,eAAe,GAAG;YACtB,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC;YAC9B,OAAO,OAAO,CAAC,YAAY,CAAC,CAAC;SAC9B,CAAC;;QAGF,MAAM,CAAC,OAAO,GAAG,eAAe,CAAC;QACjC,MAAM,CAAC,OAAO,GAAG,eAAe,CAAC;QAEjC,MAAM,CAAC,MAAM,GAAG,UAAC,KAAK;;;YAEpB,YAAY,CAAC,OAAO,qBAAG,KAAK,CAAC,MAAM,0CAAE,MAAM,0CAAE,QAAQ,qCAAM,IAAI,CAAC;;YAGhE,IAAI,KAAK,CAAC,MAAM,IAAI,OAAO,KAAK,CAAC,MAAM,CAAC,MAAM,KAAK,QAAQ,EAAE;gBAC3D,IAAM,OAAK,GAAG,IAAI,KAAK,EAAE,CAAC;gBAC1B,OAAK,CAAC,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;gBAEhC,OAAK,CAAC,MAAM,GAAG;oBACb,YAAY,CAAC,MAAM,GAAG,OAAK,CAAC,MAAM,CAAC;oBACnC,YAAY,CAAC,KAAK,GAAG,OAAK,CAAC,KAAK,CAAC;oBACjC,OAAO,OAAO,CAAC,YAAY,CAAC,CAAC;iBAC9B,CAAC;aACH;iBACI;gBACH,OAAO,OAAO,CAAC,YAAY,CAAC,CAAC;aAC9B;SACF,CAAC;;QAGF,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;KAC5B,CAAC,CAAC;AACL;;;;"}