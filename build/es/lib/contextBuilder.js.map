{"version":3,"file":"contextBuilder.js","sources":["../../../src/react/lib/contextBuilder.ts"],"sourcesContent":["import * as React from 'react';\nimport invariant from 'tiny-invariant';\n\n\n/* --------\n * Interface and Types Definition\n * -------- */\nexport type ProviderProps<Context> = {\n  initialState?: Context;\n  children: React.ReactNode\n};\n\n\nexport type ConsumerProps<Context> = {\n  children: (props: Context) => React.ReactNode\n};\n\n\nexport type BuiltContext<Context> = {\n  hook: () => Context,\n  Provider: React.Provider<Context>,\n  Consumer: React.Consumer<Context>\n};\n\n\n/* --------\n * Context Builder\n * -------- */\nexport default function contextBuilder<Context>(\n  initialContext?: Context\n): BuiltContext<Context> {\n  /** Create the base Context */\n  const BaseContext = React.createContext<Context | undefined>(initialContext);\n\n  /** Init the Hook Function */\n  function useContextHook(): Context {\n    /** Get the value of the context */\n    const ctxValue = React.useContext(BaseContext);\n    /** Assert value exists */\n    invariant(\n      ctxValue !== undefined,\n      'useContext() hook must be invoked inside its right Context'\n    );\n    /** Return the Context */\n    return ctxValue;\n  }\n\n  /** Return context tools */\n  return {\n    hook    : useContextHook,\n    Provider: BaseContext.Provider as React.Provider<Context>,\n    Consumer: BaseContext.Consumer as React.Consumer<Context>\n  };\n}\n"],"names":["React.createContext","React.useContext","invariant"],"mappings":";;;;;;;;;AAyBA;;;SAGwB,cAAc,CACpC,cAAwB;;IAGxB,IAAM,WAAW,GAAGA,mBAAmB,CAAsB,cAAc,CAAC,CAAC;;IAG7E,SAAS,cAAc;;QAErB,IAAM,QAAQ,GAAGC,gBAAgB,CAAC,WAAW,CAAC,CAAC;;QAE/CC,6BAAS,CACP,QAAQ,KAAK,SAAS,EACtB,4DAA4D,CAC7D,CAAC;;QAEF,OAAO,QAAQ,CAAC;KACjB;;IAGD,OAAO;QACL,IAAI,EAAM,cAAc;QACxB,QAAQ,EAAE,WAAW,CAAC,QAAmC;QACzD,QAAQ,EAAE,WAAW,CAAC,QAAmC;KAC1D,CAAC;AACJ;;;;"}