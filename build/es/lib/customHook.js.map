{"version":3,"file":"customHook.js","sources":["../../../src/react/lib/customHook.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { getElementType, PropsWithAs } from '@appbuckets/react-ui-core';\n\nimport getSharedClassNames, {\n  SharedClassNamesAndProps,\n  SharedProps\n} from './getSharedClassNames';\n\nimport splitStateClassName, { SplitStateClassName } from './splitStateClassName';\n\nimport { FontAwesomeIcon, FontAwesomeIconStyle, SharedComponentStateProps } from '../generic';\nimport getFontawesomeIconClassName from './getFontawesomeIconClassName';\n\n\n/**\n * Export a function to use the correct\n * element type, wrapped by a react useMemo\n * hook function\n */\nexport function useElementType<P = {}>(\n  Component: React.ComponentType<PropsWithAs<P>>,\n  props: PropsWithAs<P>,\n  getDefault?: ((props: PropsWithAs<P>) => React.ElementType | undefined)\n): React.ElementType | string {\n  return React.useMemo(\n    () => getElementType(Component, props, getDefault),\n    // eslint-disable-next-line\n    [\n      Component.defaultProps?.as,\n      props.as,\n      props.href,\n      getDefault\n    ]\n  );\n}\n\n\n/**\n * Export a function to use the correct\n * shared className, wrapped by a react useMemo\n */\nexport function useSharedClassName<P>(props: P): Readonly<SharedClassNamesAndProps<P>> {\n\n  /** Extract Props used to build shared className string */\n  const {\n    as,\n    backgroundColor,\n    className,\n    columnsAlign,\n    display,\n    fontWeight,\n    width,\n    offsetBy,\n    size,\n    textAlign,\n    textColor,\n    verticalAlign,\n    withoutGap,\n    ...rest\n  } = props as P & SharedProps;\n\n  /** Use a memoized value to build classes */\n  const classes = React.useMemo(\n    (): string => getSharedClassNames({\n      backgroundColor,\n      className,\n      columnsAlign,\n      display,\n      fontWeight,\n      width,\n      offsetBy,\n      size,\n      textAlign,\n      textColor,\n      verticalAlign,\n      withoutGap\n    }).className,\n    [\n      backgroundColor,\n      className,\n      columnsAlign,\n      display,\n      fontWeight,\n      width,\n      offsetBy,\n      size,\n      textAlign,\n      textColor,\n      verticalAlign,\n      withoutGap\n    ]\n  );\n\n  /** Return className and rest props */\n  return { className: classes, rest } as Readonly<SharedClassNamesAndProps<P>>;\n}\n\n\n/**\n * Export a function to split the state className\n * from component Props\n */\nexport function useSplitStateClassName<P extends SharedComponentStateProps>(props: P): Readonly<SplitStateClassName<P>> {\n\n  const {\n    appearance,\n    danger,\n    info,\n    primary,\n    secondary,\n    success,\n    warning,\n    ...rest\n  } = props;\n\n  /** Use a memoized value to build classes */\n  const [ classes, , state ] = React.useMemo(\n    () => splitStateClassName({\n      appearance,\n      danger,\n      info,\n      primary,\n      secondary,\n      success,\n      warning\n    }),\n    [\n      appearance,\n      danger,\n      info,\n      primary,\n      secondary,\n      success,\n      warning\n    ]\n  );\n\n  return [ classes, rest, state ] as unknown as Readonly<SplitStateClassName<P>>;\n}\n\n\n/**\n * Export a memoized function to get the right fontawesome class based on name and iconStyle\n */\nexport function useFontawesomeIcon(name?: FontAwesomeIcon, iconStyle?: FontAwesomeIconStyle): string | null {\n  return React.useMemo(\n    () => getFontawesomeIconClassName(name, iconStyle),\n    [ name, iconStyle ]\n  );\n}\n"],"names":["React.useMemo","getElementType"],"mappings":";;;;;;;;;;;AAeA;;;;;SAKgB,cAAc,CAC5B,SAA8C,EAC9C,KAAqB,EACrB,UAAuE;;IAEvE,OAAOA,aAAa,CAClB,cAAM,OAAAC,0BAAc,CAAC,SAAS,EAAE,KAAK,EAAE,UAAU,CAAC,GAAA;;IAElD;cACE,SAAS,CAAC,YAAY,0CAAE,EAAE;QAC1B,KAAK,CAAC,EAAE;QACR,KAAK,CAAC,IAAI;QACV,UAAU;KACX,CACF,CAAC;AACJ,CAAC;AAGD;;;;SAIgB,kBAAkB,CAAI,KAAQ;;IAG5C,IAAM,KAeF,KAAwB,EAd1B,EAAE,QAAA,EACF,eAAe,qBAAA,EACf,SAAS,eAAA,EACT,YAAY,kBAAA,EACZ,OAAO,aAAA,EACP,UAAU,gBAAA,EACV,KAAK,WAAA,EACL,QAAQ,cAAA,EACR,IAAI,UAAA,EACJ,SAAS,eAAA,EACT,SAAS,eAAA,EACT,aAAa,mBAAA,EACb,UAAU,gBAAA,EACP,IAAI,qBAdH,qKAeL,CAA2B,CAAC;;IAG7B,IAAM,OAAO,GAAGD,aAAa,CAC3B,cAAc,OAAA,mBAAmB,CAAC;QAChC,eAAe,iBAAA;QACf,SAAS,WAAA;QACT,YAAY,cAAA;QACZ,OAAO,SAAA;QACP,UAAU,YAAA;QACV,KAAK,OAAA;QACL,QAAQ,UAAA;QACR,IAAI,MAAA;QACJ,SAAS,WAAA;QACT,SAAS,WAAA;QACT,aAAa,eAAA;QACb,UAAU,YAAA;KACX,CAAC,CAAC,SAAS,GAAA,EACZ;QACE,eAAe;QACf,SAAS;QACT,YAAY;QACZ,OAAO;QACP,UAAU;QACV,KAAK;QACL,QAAQ;QACR,IAAI;QACJ,SAAS;QACT,SAAS;QACT,aAAa;QACb,UAAU;KACX,CACF,CAAC;;IAGF,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,MAAA,EAA2C,CAAC;AAC/E,CAAC;AAGD;;;;SAIgB,sBAAsB,CAAsC,KAAQ;IAGhF,IAAA,UAAU,GAQR,KAAK,WARG,EACV,MAAM,GAOJ,KAAK,OAPD,EACN,IAAI,GAMF,KAAK,KANH,EACJ,OAAO,GAKL,KAAK,QALA,EACP,SAAS,GAIP,KAAK,UAJE,EACT,OAAO,GAGL,KAAK,QAHA,EACP,OAAO,GAEL,KAAK,QAFA,EACJ,IAAI,iBACL,KAAK,EATH,8EASL,CADQ,CACC;;IAGJ,IAAA,KAAuBA,aAAa,CACxC,cAAM,OAAA,mBAAmB,CAAC;QACxB,UAAU,YAAA;QACV,MAAM,QAAA;QACN,IAAI,MAAA;QACJ,OAAO,SAAA;QACP,SAAS,WAAA;QACT,OAAO,SAAA;QACP,OAAO,SAAA;KACR,CAAC,GAAA,EACF;QACE,UAAU;QACV,MAAM;QACN,IAAI;QACJ,OAAO;QACP,SAAS;QACT,OAAO;QACP,OAAO;KACR,CACF,EAnBO,OAAO,QAAA,EAAI,KAAK,QAmBvB,CAAC;IAEF,OAAO,CAAE,OAAO,EAAE,IAAI,EAAE,KAAK,CAAiD,CAAC;AACjF,CAAC;AAGD;;;SAGgB,kBAAkB,CAAC,IAAsB,EAAE,SAAgC;IACzF,OAAOA,aAAa,CAClB,cAAM,OAAA,2BAA2B,CAAC,IAAI,EAAE,SAAS,CAAC,GAAA,EAClD,CAAE,IAAI,EAAE,SAAS,CAAE,CACpB,CAAC;AACJ;;;;;;;"}