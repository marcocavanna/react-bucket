{"version":3,"file":"useInputValue.js","sources":["../../../src/react/hooks/useInputValue.ts"],"sourcesContent":["import { useState } from 'react';\n\nimport { ChangeHandler } from '../generic';\n\nimport { InputProps } from '../elements/Input';\n\n\ntype InputValue<T> = { raw: string, casted: T | null };\n\nexport function useInputValue<T = string>(\n  initialValue?: T\n): [ T, ChangeHandler<HTMLInputElement, InputProps>, string ] {\n\n  const [ inputValue, setInputValue ] = useState<InputValue<T>>({\n    raw   : initialValue ? String(initialValue) : '',\n    casted: initialValue ?? null\n  });\n\n  const handleInputChange: ChangeHandler<HTMLInputElement, InputProps> = (e, props) => {\n    const { value, type } = props;\n\n    const raw: string = value?.toString() ?? '';\n\n    switch (type) {\n      case 'number':\n        const casted = +(value ?? '');\n        setInputValue({ raw, casted: casted as unknown as T });\n        break;\n\n      default:\n        setInputValue({ raw, casted: value as unknown as T });\n    }\n  };\n\n  return [\n    inputValue.casted as unknown as T,\n    handleInputChange,\n    inputValue.raw\n  ];\n\n}\n"],"names":["useState"],"mappings":";;;;;;SASgB,aAAa,CAC3B,YAAgB;IAGV,IAAA,KAAgCA,cAAQ,CAAgB;QAC5D,GAAG,EAAK,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE;QAChD,MAAM,EAAE,YAAY,aAAZ,YAAY,cAAZ,YAAY,GAAI,IAAI;KAC7B,CAAC,EAHM,UAAU,QAAA,EAAE,aAAa,QAG/B,CAAC;IAEH,IAAM,iBAAiB,GAAgD,UAAC,CAAC,EAAE,KAAK;;QACtE,IAAA,KAAK,GAAW,KAAK,MAAhB,EAAE,IAAI,GAAK,KAAK,KAAV,CAAW;QAE9B,IAAM,GAAG,SAAW,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,QAAQ,qCAAM,EAAE,CAAC;QAE5C,QAAQ,IAAI;YACV,KAAK,QAAQ;gBACX,IAAM,MAAM,GAAG,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,EAAE,CAAC,CAAC;gBAC9B,aAAa,CAAC,EAAE,GAAG,KAAA,EAAE,MAAM,EAAE,MAAsB,EAAE,CAAC,CAAC;gBACvD,MAAM;YAER;gBACE,aAAa,CAAC,EAAE,GAAG,KAAA,EAAE,MAAM,EAAE,KAAqB,EAAE,CAAC,CAAC;SACzD;KACF,CAAC;IAEF,OAAO;QACL,UAAU,CAAC,MAAsB;QACjC,iBAAiB;QACjB,UAAU,CAAC,GAAG;KACf,CAAC;AAEJ;;;;"}