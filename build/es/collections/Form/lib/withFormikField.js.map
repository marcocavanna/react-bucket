{"version":3,"file":"withFormikField.js","sources":["../../../../../src/react/collections/Form/lib/withFormikField.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  useFormikContext\n} from 'formik';\n\nimport { AnyObject } from '../../../generic';\n\nimport {\n  FormikFieldComponent,\n  FormikFieldComponentProps,\n  WithFormikFieldConfiguration,\n  WrappedComponentInnerProps\n} from './withFormikField.types';\n\n\n/* --------\n * Formik Field Wrapper HOC\n * -------- */\nexport default function withFormikField<P extends WrappedComponentInnerProps, ValueType = any, DisplayedValue = ValueType>(\n  configuration: WithFormikFieldConfiguration<P, ValueType, DisplayedValue>\n) {\n\n  /** Get field Configuration and apply defaults */\n  const {\n    Component,\n    computeValue,\n    defaultProps,\n    displayName,\n    onChange          : overridenOnChangeHandler,\n    overrideProps,\n    setTouchedOnChange: defaultSetTouchedOnChange = true\n  } = configuration;\n\n  /** Define the Component */\n  const FormikField: FormikFieldComponent<P> = <K extends keyof Values,\n    Values extends AnyObject = AnyObject>(\n    props: React.PropsWithChildren<FormikFieldComponentProps<P>>\n  ) => {\n\n    /** Get component Props */\n    const {\n      name,\n      validate,\n      setTouchedOnChange : localSetTouchOnChange,\n      onChange           : localOnChangeHandler,\n      onBlur             : localOnBlurHandler,\n      getErrorOnSubmitted: localGetErrorOnSubmitted = true,\n      getErrorOnTouched  : localGetErrorOnTouched = false,\n      ...componentRestProps\n    } = {\n      ...overrideProps,\n      ...props,\n      ...defaultProps\n    };\n\n\n    /* --------\n     * Init the Hook to use Formik\n     * -------- */\n    const formik = useFormikContext<Values>();\n\n\n    /* --------\n     * Lifecycle Events to Register formik Field\n     * -------- */\n    React.useEffect(\n      () => {\n        /** Register the new Field */\n        formik.registerField(name as string, { validate });\n\n        /** Unregister form field on component unmount */\n        return () => {\n          formik.unregisterField(name as string);\n        };\n      },\n      [\n        formik,\n        formik.registerField,\n        formik.unregisterField,\n        name,\n        validate\n      ]\n    );\n\n\n    /* --------\n     * Build Component Props\n     * -------- */\n    const {\n      name    : formikFieldName,\n      onBlur  : formikBlurHandler,\n      onChange: formikChangeHandler,\n      value,\n      ...formikFieldRest\n    } = formik.getFieldProps<Values[K]>({ name, ...componentRestProps });\n\n\n    /* --------\n     * Meta Props Definition\n     * -------- */\n    const meta = formik.getFieldMeta<Values[K]>(formikFieldName);\n\n\n    /* --------\n     * Field Handlers\n     * -------- */\n    const handleFieldChange = React.useCallback(\n      (event: React.FormEvent<HTMLElement>, componentPropsFromEvent: P, ...restArgs) => {\n        /** Check if field must be set as touched on change */\n        if ((defaultSetTouchedOnChange || localSetTouchOnChange) && !meta.touched) {\n          formik.setFieldTouched(formikFieldName, true, false);\n        }\n\n        /** Check which handler must be used */\n        if (overridenOnChangeHandler) {\n          overridenOnChangeHandler(formik, event, {\n            ...formikFieldRest,\n            name: formikFieldName,\n            value,\n            ...componentPropsFromEvent\n          }, meta);\n        }\n        /** Else, fire the original formik handler */\n        else {\n          formikChangeHandler(event);\n        }\n\n        /** Fire the Local onChange handler */\n        if (localOnChangeHandler) {\n          localOnChangeHandler(event, componentPropsFromEvent, ...restArgs);\n        }\n      },\n      [\n        localSetTouchOnChange,\n        meta,\n        localOnChangeHandler,\n        formik,\n        formikFieldName,\n        formikFieldRest,\n        value,\n        formikChangeHandler\n      ]\n    );\n\n    const handleFieldBlur = React.useCallback(\n      (event: React.FocusEvent, componentPropsFromEven: P, ...restArgs) => {\n        /** Fire Formik original blur handler */\n        formikBlurHandler(event);\n\n        /** Set the field has touched */\n        if (!meta.touched) {\n          formik.setFieldTouched(formikFieldName, true, true);\n        }\n\n        /** Fire the local blur handler */\n        if (localOnBlurHandler) {\n          localOnBlurHandler(event, componentPropsFromEven, ...restArgs);\n        }\n      },\n      [ formikBlurHandler, meta.touched, localOnBlurHandler, formik, formikFieldName ]\n    );\n\n\n    /* --------\n     * Check if Value must be computed\n     * -------- */\n    const fieldValue = React.useMemo<DisplayedValue>(\n      () => {\n        if (computeValue) {\n          return computeValue(value, {\n            ...formikFieldRest,\n            ...(props as unknown as P),\n            name: formikFieldName\n          });\n        }\n        return value;\n      },\n      [ formikFieldName, formikFieldRest, props, value ]\n    );\n\n\n    /** Check if must show error */\n    const showError: boolean = (\n      (localGetErrorOnTouched) && meta.touched\n    ) || (\n      (localGetErrorOnSubmitted) && formik.submitCount > 0\n    );\n\n\n    /* --------\n     * Render the Component\n     * -------- */\n    return (\n      <Component\n        meta={meta}\n        state={{\n          danger      : !!((showError && meta.error) || props.danger),\n          isSubmitting: formik.isSubmitting,\n          message     : showError ? meta.error : undefined,\n          success     : props.success,\n          warning     : props.warning\n        }}\n        rest={{\n          ...props,\n          name,\n          onBlur  : handleFieldBlur,\n          onChange: handleFieldChange,\n          value   : fieldValue\n        }}\n      />\n    );\n\n  };\n\n  /** Define the component props */\n  FormikField.displayName = displayName ?? 'FormikField';\n\n  return FormikField;\n\n}\n"],"names":["formik","useFormikContext","React.useEffect","React.useCallback","React.useMemo","React.createElement"],"mappings":"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"}