{"version":3,"file":"RxTableColumns.js","sources":["../../../../src/react/collections/RxTable/RxTableColumns.tsx"],"sourcesContent":["import clsx from 'clsx';\nimport * as React from 'react';\n\nimport { AnyObject } from '../../generic';\nimport areEqualStringArray from './lib/areEqualStringArray';\nimport { RxTableFactory } from './RxTable.factory';\n\nimport { RxTableColumnProps, RxTableHeaderCellComponent } from './RxTable.types';\n\n\n/* --------\n * Header Title Column Component Interface\n * -------- */\nexport interface RxTableHeaderTitleColumnProps {\n  /** The Column Object */\n  column: RxTableColumnProps<any, AnyObject>;\n\n  /** Cell Component used to Render the element */\n  Component: RxTableHeaderCellComponent;\n\n  /** Set if table sorting is reversed */\n  isSortReversed: boolean;\n\n  /** On Sort Handler */\n  onSortChange: RxTableFactory<any>['setSorting'];\n\n  /** Set Sorting */\n  tableSorting: string[]\n}\n\n\n/* --------\n * Header Title Column Component Definition\n * -------- */\nconst RxTableHeaderTitleColumn: React.FunctionComponent<RxTableHeaderTitleColumnProps> = (\n  props\n) => {\n\n  const {\n    column,\n    Component,\n    isSortReversed,\n    onSortChange,\n    tableSorting\n  } = props;\n\n  /** Compute memoized sorting props */\n  const sorting = React.useMemo(\n    (): { isSortable: boolean, isSorted: boolean } => {\n      const isSortable = Array.isArray(column.sort) && !!column.sort.length;\n\n      return {\n        isSortable,\n        isSorted: isSortable && areEqualStringArray(tableSorting, column.sort!)\n      };\n    },\n    [ column.sort, tableSorting ]\n  );\n\n  /** Build classes */\n  const classes = clsx(\n    column.textAlign && `has-text-${column.textAlign}`,\n    column.headerClassName\n  );\n\n  /** Handle Sorting Change */\n  const handleSortChange = React.useCallback(\n    () => {\n      if (!sorting.isSortable) {\n        return;\n      }\n\n      if (sorting.isSorted) {\n        onSortChange(column.sort!, !isSortReversed);\n      }\n      else {\n        onSortChange(column.sort!, false);\n      }\n    },\n    [\n      column.sort,\n      isSortReversed,\n      onSortChange,\n      sorting.isSortable,\n      sorting.isSorted\n    ]\n  );\n\n  return (\n    <Component\n      className={classes}\n      column={column}\n      content={column.header}\n      hasSorting={sorting.isSortable}\n      isActualSortingColumn={sorting.isSorted}\n      isReversedSorting={sorting.isSorted && isSortReversed}\n      onClick={sorting.isSortable ? handleSortChange : undefined}\n    />\n  );\n};\n\nRxTableHeaderTitleColumn.displayName = 'RxTableHeaderTitleColumn';\n\nexport {\n  RxTableHeaderTitleColumn\n};\n"],"names":["React.useMemo","clsx","React.useCallback","React.createElement"],"mappings":";;;;;;;;;;;;AA+BA;;;IAGM,wBAAwB,GAA2D,UACvF,KAAK;IAIH,IAAA,MAAM,GAKJ,KAAK,OALD,EACN,SAAS,GAIP,KAAK,UAJE,EACT,cAAc,GAGZ,KAAK,eAHO,EACd,YAAY,GAEV,KAAK,aAFK,EACZ,YAAY,GACV,KAAK,aADK,CACJ;;IAGV,IAAM,OAAO,GAAGA,aAAa,CAC3B;QACE,IAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QAEtE,OAAO;YACL,UAAU,YAAA;YACV,QAAQ,EAAE,UAAU,IAAI,mBAAmB,CAAC,YAAY,EAAE,MAAM,CAAC,IAAK,CAAC;SACxE,CAAC;KACH,EACD,CAAE,MAAM,CAAC,IAAI,EAAE,YAAY,CAAE,CAC9B,CAAC;;IAGF,IAAM,OAAO,GAAGC,wBAAI,CAClB,MAAM,CAAC,SAAS,IAAI,cAAY,MAAM,CAAC,SAAW,EAClD,MAAM,CAAC,eAAe,CACvB,CAAC;;IAGF,IAAM,gBAAgB,GAAGC,iBAAiB,CACxC;QACE,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;YACvB,OAAO;SACR;QAED,IAAI,OAAO,CAAC,QAAQ,EAAE;YACpB,YAAY,CAAC,MAAM,CAAC,IAAK,EAAE,CAAC,cAAc,CAAC,CAAC;SAC7C;aACI;YACH,YAAY,CAAC,MAAM,CAAC,IAAK,EAAE,KAAK,CAAC,CAAC;SACnC;KACF,EACD;QACE,MAAM,CAAC,IAAI;QACX,cAAc;QACd,YAAY;QACZ,OAAO,CAAC,UAAU;QAClB,OAAO,CAAC,QAAQ;KACjB,CACF,CAAC;IAEF,QACEC,oBAAC,SAAS,IACR,SAAS,EAAE,OAAO,EAClB,MAAM,EAAE,MAAM,EACd,OAAO,EAAE,MAAM,CAAC,MAAM,EACtB,UAAU,EAAE,OAAO,CAAC,UAAU,EAC9B,qBAAqB,EAAE,OAAO,CAAC,QAAQ,EACvC,iBAAiB,EAAE,OAAO,CAAC,QAAQ,IAAI,cAAc,EACrD,OAAO,EAAE,OAAO,CAAC,UAAU,GAAG,gBAAgB,GAAG,SAAS,GAC1D,EACF;AACJ,EAAE;AAEF,wBAAwB,CAAC,WAAW,GAAG,0BAA0B;;;;"}