{"version":3,"file":"RxTable.factory.js","sources":["../../../../src/react/collections/RxTable/RxTable.factory.ts"],"sourcesContent":["import arraySort from 'array-sort';\nimport * as React from 'react';\n\nimport { AnyObject } from '../../generic';\n\nimport { useAutoControlledValue } from '../../hooks/useAutoControlledValue';\n\nimport areEqualStringArray from './lib/areEqualStringArray';\n\nimport { RxTableColumnProps } from './RxTable.types';\n\n\n/* --------\n * Table Factory Configuration\n * -------- */\nexport interface UseRxTableFactoryConfig<Data, ColumnProps extends {} = {}> {\n  /** Table Columns definition */\n  columns: RxTableColumnProps<Data, ColumnProps>[];\n\n  /** Table Data */\n  data: Data[] | ((timestamp: number) => (Data[] | Promise<Data[]>));\n\n  /** Set default data to show while factory is loading */\n  defaultData?: Data[];\n\n  /** Set the default loading state */\n  defaultLoading?: boolean;\n\n  /** Set initial reverse sorting */\n  defaultReverseSorting?: boolean;\n\n  /** Set initial sort */\n  defaultSort?: string[];\n\n  /**\n   * Set the filter logic. With and type, all filter must return\n   * true to show item, with or at least one must be valid\n   */\n  filterLogic?: 'and' | 'or';\n\n  /** On Row Click Handler */\n  onRowClick?: (row: Data, index: number, array: Data[]) => void;\n\n  /** Callback handler fired when sort is changing */\n  onSortChange?: (sorting: string[], reverse: boolean) => void;\n\n  /** Dependencies passed to data load hook. Set this to manually control data reload */\n  reloadDependency?: any;\n\n  /** Disable Loader on data reload */\n  reloadSilently?: boolean;\n\n  /** Manual control reverse sorting */\n  reverseSorting?: boolean;\n\n  /** Manual control sorting */\n  sort?: string[];\n}\n\n\n/* --------\n * Table Factory Tools\n * -------- */\nexport interface RxTableFactory<Data> {\n  /** Data */\n  data: Data[];\n\n  /** Data load error */\n  error: any;\n\n  /** Current Filters */\n  filters: Record<string, any>;\n\n  /** Row Click Handler */\n  handleRowClick: (index: number) => void;\n\n  /** Return if Table could show filter row */\n  hasFilterRow: boolean;\n\n  /** Return if Table could show header row */\n  hasHeaderRow: boolean;\n\n  /** Data is Currently Loading */\n  isLoading: boolean;\n\n  /** Check if row click is enabled */\n  isRowClickEnabled: boolean;\n\n  /** Checker for reversed sorting */\n  isSortReversed: boolean;\n\n  /** Change column filter */\n  setFilter: (column: string, value: any) => void;\n\n  /** Change data sorting */\n  setSorting: (fields: string[], reverse: boolean) => void;\n\n  /** Current Sorting */\n  sorting: string[];\n\n  /** Filtered and Sorted Data */\n  tableData: Data[];\n}\n\n\n/* --------\n * RxTable Factory Internal Data State\n * -------- */\ninterface RxTableFactoryState<Data> {\n  /** Current Data */\n  data: Data[];\n\n  /** Data load error */\n  error: any;\n\n  /** Loading State */\n  loading: boolean;\n\n  /** The last data load timestamp */\n  lastReloadTimeStamp: number;\n}\n\n\n/* --------\n * Hook Definition\n * -------- */\nexport function useRxTableFactory<Data extends AnyObject = any>(\n  config: UseRxTableFactoryConfig<Data>\n): RxTableFactory<Data> {\n\n\n  // ----\n  // Code Destructuring\n  // ----\n  const {\n    columns,\n    data,\n    defaultData,\n    defaultLoading,\n    defaultReverseSorting: userDefinedDefaultReverseSorting,\n    defaultSort          : userDefinedDefaultSort,\n    filterLogic,\n    onRowClick,\n    onSortChange,\n    reloadDependency,\n    reloadSilently,\n    reverseSorting       : userDefinedReverseSorting,\n    sort                 : userDefinedSort\n  } = config;\n\n\n  // ----\n  // Checker Builder\n  // ----\n  const hasFilterRow = React.useMemo<boolean>(\n    () => columns.some((column) => !!column.filter),\n    [ columns ]\n  );\n\n  const hasHeaderRow = React.useMemo<boolean>(\n    () => columns.some((column) => !!column.header),\n    [ columns ]\n  );\n\n\n  // ----\n  // Data Management and Load\n  // ----\n\n  /** Build the data state */\n  const [ dataState, setDataState ] = React.useState<RxTableFactoryState<Data>>({\n    data               : Array.isArray(data) ? data : (defaultData ?? []),\n    error              : null,\n    loading            : defaultLoading ?? typeof data === 'function',\n    lastReloadTimeStamp: 0\n  });\n\n  /** Build the load data function */\n  const loadData = React.useCallback(\n    async () => {\n\n      /**\n       * If data is a plain a plain\n       * array object then there is no\n       * need to wait for data load\n       */\n      if (Array.isArray(data)) {\n        setDataState({\n          data,\n          loading            : false,\n          error              : null,\n          lastReloadTimeStamp: Date.now()\n        });\n        return;\n      }\n\n      /**\n       * If data loading is a function then\n       * must set the loading state and wait\n       * for data load.\n       * Data load is typical async than must\n       * set the loading state if the reload\n       * is not silent. A silent reload will\n       * reload table data without changing loading state\n       */\n      if (!dataState.loading && !reloadSilently) {\n        setDataState((curr) => ({\n          ...curr,\n          loading: true\n        }));\n      }\n\n      /** Try to load data */\n      try {\n        /** Await the function result */\n        const result = await data(Date.now());\n\n        setDataState({\n          data               : result,\n          loading            : false,\n          error              : null,\n          lastReloadTimeStamp: Date.now()\n        });\n      }\n      catch (error) {\n        setDataState({\n          data               : [],\n          loading            : false,\n          error,\n          lastReloadTimeStamp: Date.now()\n        });\n      }\n    },\n    [\n      data,\n      dataState.loading,\n      reloadSilently\n    ]\n  );\n\n  /** Build the effect used to load/reload data */\n  React.useEffect(\n    () => {\n      loadData();\n    },\n    [ loadData, reloadDependency ]\n  );\n\n\n  // ----\n  // Filtering Data\n  // ----\n  const [ filters, setFilteringValues ] = React.useState<Record<string, any>>(\n    columns.reduce<Record<string, any>>(\n      (acc, column) => {\n        if (column.filter) {\n          acc[column.key] = column.filter.initialValue;\n        }\n\n        return acc;\n      },\n      {}\n    )\n  );\n\n  const handleFilterChange = React.useCallback(\n    (columnKey: string, value: any) => {\n      setFilteringValues((curr) => ({\n        ...curr,\n        [columnKey]: value\n      }));\n    },\n    [ setFilteringValues ]\n  );\n\n  const filteredData = React.useMemo<Data[]>(\n    () => {\n      /** If no filter, return entire data */\n      if (!hasFilterRow) {\n        return dataState.data;\n      }\n\n      /** Get only filter columns */\n      const filterColumns = columns.filter((column) => {\n        if (!column.filter) {\n          return false;\n        }\n\n        if (column.filter.type === 'input') {\n          return typeof filters[column.key] === 'string' && !!filters[column.key].length;\n        }\n\n        if (column.filter.type === 'checkbox') {\n          return typeof filters[column.key] === 'boolean' && !!filters[column.key];\n        }\n\n        return false;\n      });\n\n      /** If no columns are able to filter data, return entire data set */\n      if (!filterColumns.length) {\n        return dataState.data;\n      }\n\n      /** Filter data using columns */\n      return dataState.data.filter((row, index, array) => {\n        return filterColumns.reduce(\n          (show: boolean, next: RxTableColumnProps<Data>) => (\n            filterLogic === 'and'\n              ? show && next.filter!.show(filters[next.key] as (string & number), row, index, array)\n              : show || next.filter!.show(filters[next.key] as (string & number), row, index, array)\n          ),\n          filterLogic === 'and'\n        );\n      });\n    },\n    [\n      columns,\n      dataState.data,\n      filterLogic,\n      filters,\n      hasFilterRow\n    ]\n  );\n\n\n  // ----\n  // Sorting Controller\n  // ----\n  const [ sorting, trySetSorting ] = useAutoControlledValue([], {\n    defaultProp: userDefinedDefaultSort,\n    prop       : userDefinedSort\n  });\n\n  const [ isSortReversed, trySetReverseSorting ] = useAutoControlledValue(false, {\n    defaultProp: userDefinedDefaultReverseSorting,\n    prop       : userDefinedReverseSorting\n  });\n\n  const handleChangeSorting = React.useCallback(\n    (newSorting: string[], reverse: boolean) => {\n      /** Check if sorting is changed */\n      const isSortChanged = !areEqualStringArray(sorting, newSorting);\n      const isReversingChanged = reverse !== isSortReversed;\n\n      /** If no change, return */\n      if (!isSortChanged && !isReversingChanged) {\n        return;\n      }\n\n      /** Call user defined handler */\n      if (onSortChange) {\n        onSortChange(newSorting, reverse);\n      }\n\n      /** Try to set new Sorting */\n      if (isSortChanged) {\n        trySetSorting(newSorting);\n      }\n\n      if (reverse !== isSortReversed) {\n        trySetReverseSorting(reverse);\n      }\n    },\n    [ onSortChange, isSortReversed, sorting, trySetReverseSorting, trySetSorting ]\n  );\n\n  const sortedData = React.useMemo<Data[]>(\n    () => {\n      if (sorting.length) {\n        return arraySort(filteredData, sorting, { reverse: isSortReversed });\n      }\n\n      return filteredData;\n    },\n    [ filteredData, isSortReversed, sorting ]\n  );\n\n\n  // ----\n  // Internal Handlers\n  // ----\n  const handleRowClick = React.useCallback(\n    (index: number) => {\n      if (onRowClick) {\n        onRowClick(sortedData[index], index, sortedData);\n      }\n    },\n    [ onRowClick, sortedData ]\n  );\n\n\n  return {\n    handleRowClick,\n    hasFilterRow,\n    hasHeaderRow,\n    error            : dataState.error,\n    filters,\n    isLoading        : dataState.loading,\n    isRowClickEnabled: typeof onRowClick === 'function',\n    data             : dataState.data,\n    setFilter        : handleFilterChange,\n    setSorting       : handleChangeSorting,\n    tableData        : sortedData,\n    isSortReversed,\n    sorting\n  };\n}\n"],"names":["React.useMemo","React.useState","React.useCallback","React.useEffect","useAutoControlledValue","arraySort"],"mappings":";;;;;;;;;;;;;;AA2HA;;;SAGgB,iBAAiB,CAC/B,MAAqC;IADvC,iBAyRC;;;;IAhRG,IAAA,OAAO,GAaL,MAAM,QAbD,EACP,IAAI,GAYF,MAAM,KAZJ,EACJ,WAAW,GAWT,MAAM,YAXG,EACX,cAAc,GAUZ,MAAM,eAVM,EACS,gCAAgC,GASrD,MAAM,sBAT+C,EAChC,sBAAsB,GAQ3C,MAAM,YARqC,EAC7C,WAAW,GAOT,MAAM,YAPG,EACX,UAAU,GAMR,MAAM,WANE,EACV,YAAY,GAKV,MAAM,aALI,EACZ,gBAAgB,GAId,MAAM,iBAJQ,EAChB,cAAc,GAGZ,MAAM,eAHM,EACS,yBAAyB,GAE9C,MAAM,eAFwC,EACzB,eAAe,GACpC,MAAM,KAD8B,CAC7B;;;;IAMX,IAAM,YAAY,GAAGA,aAAa,CAChC,cAAM,OAAA,OAAO,CAAC,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,CAAC,CAAC,MAAM,CAAC,MAAM,GAAA,CAAC,GAAA,EAC/C,CAAE,OAAO,CAAE,CACZ,CAAC;IAEF,IAAM,YAAY,GAAGA,aAAa,CAChC,cAAM,OAAA,OAAO,CAAC,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,CAAC,CAAC,MAAM,CAAC,MAAM,GAAA,CAAC,GAAA,EAC/C,CAAE,OAAO,CAAE,CACZ,CAAC;;;;;IAQI,IAAA,KAA8BC,cAAc,CAA4B;QAC5E,IAAI,EAAiB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,WAAW,aAAX,WAAW,cAAX,WAAW,GAAI,EAAE,CAAC;QACrE,KAAK,EAAgB,IAAI;QACzB,OAAO,EAAc,cAAc,aAAd,cAAc,cAAd,cAAc,GAAI,OAAO,IAAI,KAAK,UAAU;QACjE,mBAAmB,EAAE,CAAC;KACvB,CAAC,EALM,SAAS,QAAA,EAAE,YAAY,QAK7B,CAAC;;IAGH,IAAM,QAAQ,GAAGC,iBAAiB,CAChC;;;;;;;;;;oBAOE,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;wBACvB,YAAY,CAAC;4BACX,IAAI,MAAA;4BACJ,OAAO,EAAc,KAAK;4BAC1B,KAAK,EAAgB,IAAI;4BACzB,mBAAmB,EAAE,IAAI,CAAC,GAAG,EAAE;yBAChC,CAAC,CAAC;wBACH,sBAAO;qBACR;;;;;;;;;;oBAWD,IAAI,CAAC,SAAS,CAAC,OAAO,IAAI,CAAC,cAAc,EAAE;wBACzC,YAAY,CAAC,UAAC,IAAI,IAAK,4CAClB,IAAI,KACP,OAAO,EAAE,IAAI,OACb,CAAC,CAAC;qBACL;;;;oBAKgB,qBAAM,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAA;;oBAA/B,MAAM,GAAG,SAAsB;oBAErC,YAAY,CAAC;wBACX,IAAI,EAAiB,MAAM;wBAC3B,OAAO,EAAc,KAAK;wBAC1B,KAAK,EAAgB,IAAI;wBACzB,mBAAmB,EAAE,IAAI,CAAC,GAAG,EAAE;qBAChC,CAAC,CAAC;;;;oBAGH,YAAY,CAAC;wBACX,IAAI,EAAiB,EAAE;wBACvB,OAAO,EAAc,KAAK;wBAC1B,KAAK,SAAA;wBACL,mBAAmB,EAAE,IAAI,CAAC,GAAG,EAAE;qBAChC,CAAC,CAAC;;;;;SAEN,EACD;QACE,IAAI;QACJ,SAAS,CAAC,OAAO;QACjB,cAAc;KACf,CACF,CAAC;;IAGFC,eAAe,CACb;QACE,QAAQ,EAAE,CAAC;KACZ,EACD,CAAE,QAAQ,EAAE,gBAAgB,CAAE,CAC/B,CAAC;;;;IAMI,IAAA,KAAkCF,cAAc,CACpD,OAAO,CAAC,MAAM,CACZ,UAAC,GAAG,EAAE,MAAM;QACV,IAAI,MAAM,CAAC,MAAM,EAAE;YACjB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC;SAC9C;QAED,OAAO,GAAG,CAAC;KACZ,EACD,EAAE,CACH,CACF,EAXO,OAAO,QAAA,EAAE,kBAAkB,QAWlC,CAAC;IAEF,IAAM,kBAAkB,GAAGC,iBAAiB,CAC1C,UAAC,SAAiB,EAAE,KAAU;QAC5B,kBAAkB,CAAC,UAAC,IAAI;;YAAK,4CACxB,IAAI,gBACN,SAAS,IAAG,KAAK;SAClB,CAAC,CAAC;KACL,EACD,CAAE,kBAAkB,CAAE,CACvB,CAAC;IAEF,IAAM,YAAY,GAAGF,aAAa,CAChC;;QAEE,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO,SAAS,CAAC,IAAI,CAAC;SACvB;;QAGD,IAAM,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC,UAAC,MAAM;YAC1C,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;gBAClB,OAAO,KAAK,CAAC;aACd;YAED,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;gBAClC,OAAO,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,QAAQ,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;aAChF;YAED,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;gBACrC,OAAO,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,SAAS,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAC1E;YAED,OAAO,KAAK,CAAC;SACd,CAAC,CAAC;;QAGH,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;YACzB,OAAO,SAAS,CAAC,IAAI,CAAC;SACvB;;QAGD,OAAO,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,KAAK,EAAE,KAAK;YAC7C,OAAO,aAAa,CAAC,MAAM,CACzB,UAAC,IAAa,EAAE,IAA8B,IAAK,QACjD,WAAW,KAAK,KAAK;kBACjB,IAAI,IAAI,IAAI,CAAC,MAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAsB,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC;kBACpF,IAAI,IAAI,IAAI,CAAC,MAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAsB,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,IACzF,EACD,WAAW,KAAK,KAAK,CACtB,CAAC;SACH,CAAC,CAAC;KACJ,EACD;QACE,OAAO;QACP,SAAS,CAAC,IAAI;QACd,WAAW;QACX,OAAO;QACP,YAAY;KACb,CACF,CAAC;;;;IAMI,IAAA,KAA6BI,6CAAsB,CAAC,EAAE,EAAE;QAC5D,WAAW,EAAE,sBAAsB;QACnC,IAAI,EAAS,eAAe;KAC7B,CAAC,EAHM,OAAO,QAAA,EAAE,aAAa,QAG5B,CAAC;IAEG,IAAA,KAA2CA,6CAAsB,CAAC,KAAK,EAAE;QAC7E,WAAW,EAAE,gCAAgC;QAC7C,IAAI,EAAS,yBAAyB;KACvC,CAAC,EAHM,cAAc,QAAA,EAAE,oBAAoB,QAG1C,CAAC;IAEH,IAAM,mBAAmB,GAAGF,iBAAiB,CAC3C,UAAC,UAAoB,EAAE,OAAgB;;QAErC,IAAM,aAAa,GAAG,CAAC,mBAAmB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;QAChE,IAAM,kBAAkB,GAAG,OAAO,KAAK,cAAc,CAAC;;QAGtD,IAAI,CAAC,aAAa,IAAI,CAAC,kBAAkB,EAAE;YACzC,OAAO;SACR;;QAGD,IAAI,YAAY,EAAE;YAChB,YAAY,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;SACnC;;QAGD,IAAI,aAAa,EAAE;YACjB,aAAa,CAAC,UAAU,CAAC,CAAC;SAC3B;QAED,IAAI,OAAO,KAAK,cAAc,EAAE;YAC9B,oBAAoB,CAAC,OAAO,CAAC,CAAC;SAC/B;KACF,EACD,CAAE,YAAY,EAAE,cAAc,EAAE,OAAO,EAAE,oBAAoB,EAAE,aAAa,CAAE,CAC/E,CAAC;IAEF,IAAM,UAAU,GAAGF,aAAa,CAC9B;QACE,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,OAAOK,6BAAS,CAAC,YAAY,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC,CAAC;SACtE;QAED,OAAO,YAAY,CAAC;KACrB,EACD,CAAE,YAAY,EAAE,cAAc,EAAE,OAAO,CAAE,CAC1C,CAAC;;;;IAMF,IAAM,cAAc,GAAGH,iBAAiB,CACtC,UAAC,KAAa;QACZ,IAAI,UAAU,EAAE;YACd,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;SAClD;KACF,EACD,CAAE,UAAU,EAAE,UAAU,CAAE,CAC3B,CAAC;IAGF,OAAO;QACL,cAAc,gBAAA;QACd,YAAY,cAAA;QACZ,YAAY,cAAA;QACZ,KAAK,EAAc,SAAS,CAAC,KAAK;QAClC,OAAO,SAAA;QACP,SAAS,EAAU,SAAS,CAAC,OAAO;QACpC,iBAAiB,EAAE,OAAO,UAAU,KAAK,UAAU;QACnD,IAAI,EAAe,SAAS,CAAC,IAAI;QACjC,SAAS,EAAU,kBAAkB;QACrC,UAAU,EAAS,mBAAmB;QACtC,SAAS,EAAU,UAAU;QAC7B,cAAc,gBAAA;QACd,OAAO,SAAA;KACR,CAAC;AACJ;;;;"}