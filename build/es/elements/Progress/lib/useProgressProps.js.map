{"version":3,"file":"useProgressProps.js","sources":["../../../../../src/react/elements/Progress/lib/useProgressProps.ts"],"sourcesContent":["import * as React from 'react';\nimport clsx from 'clsx';\n\nimport { classByKey, isValue } from '@appbuckets/react-ui-core';\n\nimport { MinimalReactBucketComponentProps, ReactBucketColor } from '../../../generic';\n\nimport { StrictSharedProgressProps } from '../Shared.types';\n\n\nexport type ProgressDescriptor = {\n  max: number;\n  min: number;\n  overvalued: boolean;\n  percentage: number;\n  rawMax: number;\n  rawValue: number;\n  width: number;\n  value: number;\n};\n\nexport interface ProgressProps<P> {\n  className: string;\n\n  progress: ProgressDescriptor;\n\n  rest: Omit<P, keyof StrictSharedProgressProps | 'className'>;\n}\n\ntype ExtendedSharedProgressProps = MinimalReactBucketComponentProps<StrictSharedProgressProps>;\n\nexport default function useProgressProps<P extends ExtendedSharedProgressProps>(props: P): ProgressProps<P> {\n\n  const {\n    appearance,\n    className,\n    colorSteps: {\n      low    : lowStep = 20,\n      midLow : midLowStep = 40,\n      midHigh: midHighStep = 60,\n      high   : highStep = 80\n    } = {},\n    discreet,\n    inverted,\n    max       : userDefinedMax,\n    min       : userDefinedMin,\n    size,\n    value     : userDefinedValue,\n    ...rest\n  } = props;\n\n  const memoizedProgressProps = React.useMemo<Omit<ProgressProps<P>, 'rest'>>(\n    () => {\n\n      // ----\n      // Normalize Value and Percentage\n      // ----\n      const tmpValue = Math.round(userDefinedValue * 100) / 100;\n      const tmpMax = Math.round(userDefinedMax as number * 100) / 100;\n\n      const progressMin = Math.round(userDefinedMin as number * 100) / 100;\n\n      const hasOverValue = tmpMax < tmpValue;\n\n      const progressValue = hasOverValue ? tmpMax : tmpValue;\n      const progressMax = hasOverValue ? tmpValue : tmpMax;\n\n      const progressPercentage = Math.round(((tmpValue - progressMin) / (tmpMax - progressMin)) * 100);\n      const progressWidth = Math.round(((progressValue - progressMin) / (progressMax - progressMin)) * 100);\n\n\n      // ----\n      // Build the Class to Define LinearProgress Color\n      // ----\n      const colorClassName: ReactBucketColor | string | null = (() => {\n        /** If is discreet, return null */\n        if (discreet) {\n          return null;\n        }\n\n        /** If an appearance color has been declared, it will win on auto color */\n        if (appearance) {\n          return appearance;\n        }\n\n        if (progressPercentage <= lowStep) {\n          return inverted ? 'high' : 'low';\n        }\n\n        if (progressPercentage > lowStep && progressPercentage <= midLowStep) {\n          return inverted ? 'mid-high' : 'mid-low';\n        }\n\n        if (progressPercentage > midLowStep && progressPercentage <= midHighStep) {\n          return 'mid';\n        }\n\n        if (progressPercentage > midHighStep && progressPercentage <= highStep) {\n          return inverted ? 'mid-low' : 'mid-high';\n        }\n\n        return inverted ? 'low' : 'high';\n      })();\n\n\n      // ----\n      // Build Component Classes and Element Type\n      // ----\n      const classes = clsx(\n        classByKey(hasOverValue, 'overvalued'),\n        classByKey(inverted, 'inverted'),\n        'progress',\n        isValue(size),\n        isValue(colorClassName),\n        className\n      );\n\n      return {\n        className: classes,\n        progress : {\n          max       : progressMax,\n          min       : progressMin,\n          overvalued: hasOverValue,\n          percentage: progressPercentage,\n          rawMax    : tmpMax,\n          rawValue  : tmpValue,\n          width     : progressWidth,\n          value     : progressValue\n        }\n      };\n\n    },\n    [\n      props.appearance,\n      props.className,\n      props.colorSteps,\n      props.discreet,\n      props.inverted,\n      props.max,\n      props.min,\n      props.size,\n      props.value\n    ]\n  );\n\n  return {\n    ...memoizedProgressProps,\n    rest\n  };\n}\n"],"names":["React.useMemo","clsx","classByKey","isValue"],"mappings":"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"}