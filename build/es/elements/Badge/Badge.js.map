{"version":3,"file":"Badge.js","sources":["../../../../src/react/elements/Badge/Badge.tsx"],"sourcesContent":["import * as React from 'react';\nimport clsx from 'clsx';\n\nimport {\n  createShorthandFactory,\n  childrenUtils\n} from '@appbuckets/react-ui-core';\n\nimport { CreatableFunctionComponent } from '../../generic';\n\nimport {\n  useElementType,\n  useSharedClassName,\n  useSplitStateClassName\n} from '../../lib';\n\nimport { Icon } from '../Icon';\n\nimport { BadgeProps } from './Badge.types';\n\n\n/* --------\n * Component Declare\n * -------- */\ntype BadgeComponent = CreatableFunctionComponent<BadgeProps>;\n\n\n/* --------\n * Component Render\n * -------- */\nconst Badge: BadgeComponent = (props) => {\n\n  const {\n    className,\n    rest: {\n      children,\n      content,\n      icon,\n      ...rawRest\n    }\n  } = useSharedClassName(props);\n\n  /** Get the component element type */\n  const ElementType = useElementType(Badge, props);\n\n  /** Check if component has declared children */\n  const hasChildren = !childrenUtils.isNil(children);\n\n  /** Split state className from rest props */\n  const [ stateClasses, rest ] = useSplitStateClassName(rawRest);\n\n  /** Build the element class list */\n  const classes = clsx(\n    'badge',\n    stateClasses,\n    (!!content || !!hasChildren || !!icon) && 'with-content',\n    className\n  );\n\n  /** Build Icon Element */\n  const iconElement = React.useMemo(\n    () => !hasChildren && Icon.create(icon, {\n      autoGenerateKey: false\n    }),\n    [ icon, hasChildren ]\n  );\n\n  /** If children are declared, render them */\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        <div className={'content'}>\n          {children}\n        </div>\n      </ElementType>\n    );\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      <div className={'content'}>\n        {iconElement}\n        {content}\n      </div>\n    </ElementType>\n  );\n};\n\nBadge.displayName = 'Badge';\n\nBadge.create = createShorthandFactory(Badge, (content) => ({ content }));\n\nexport default Badge;\n"],"names":["useSharedClassName","useElementType","childrenUtils","useSplitStateClassName","clsx","React.useMemo","React.createElement","createShorthandFactory"],"mappings":";;;;;;;;;;;;;;AA2BA;;;IAGM,KAAK,GAAmB,UAAC,KAAK;IAElC,IAAM,KAQFA,6BAAkB,CAAC,KAAK,CAAC,EAP3B,SAAS,eAAA,EACT,YAKC,EAJC,QAAQ,cAAA,EACR,OAAO,aAAA,EACP,IAAI,UAAA,EACD,OAAO,qBAJN,+BAKL,CAC0B,CAAC;;IAG9B,IAAM,WAAW,GAAGC,yBAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;;IAGjD,IAAM,WAAW,GAAG,CAACC,yBAAa,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;;IAG7C,IAAA,KAAyBC,iCAAsB,CAAC,OAAO,CAAC,EAAtD,YAAY,QAAA,EAAE,IAAI,QAAoC,CAAC;;IAG/D,IAAM,OAAO,GAAGC,wBAAI,CAClB,OAAO,EACP,YAAY,EACZ,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,WAAW,IAAI,CAAC,CAAC,IAAI,KAAK,cAAc,EACxD,SAAS,CACV,CAAC;;IAGF,IAAM,WAAW,GAAGC,aAAa,CAC/B,cAAM,OAAA,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;QACtC,eAAe,EAAE,KAAK;KACvB,CAAC,GAAA,EACF,CAAE,IAAI,EAAE,WAAW,CAAE,CACtB,CAAC;;IAGF,IAAI,CAACH,yBAAa,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;QAClC,QACEI,oBAAC,WAAW,sBAAK,IAAI,IAAE,SAAS,EAAE,OAAO;YACvCA,6BAAK,SAAS,EAAE,SAAS,IACtB,QAAQ,CACL,CACM,EACd;KACH;IAED,QACEA,oBAAC,WAAW,sBAAK,IAAI,IAAE,SAAS,EAAE,OAAO;QACvCA,6BAAK,SAAS,EAAE,SAAS;YACtB,WAAW;YACX,OAAO,CACJ,CACM,EACd;AACJ,EAAE;AAEF,KAAK,CAAC,WAAW,GAAG,OAAO,CAAC;AAE5B,KAAK,CAAC,MAAM,GAAGC,kCAAsB,CAAC,KAAK,EAAE,UAAC,OAAO,IAAK,QAAC,EAAE,OAAO,SAAA,EAAE,IAAC,CAAC;;;;"}